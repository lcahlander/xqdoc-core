// $ANTLR : XQuery.g -> XQueryParserTokenTypes.txt$
XQueryParser    // output token vocab name
LITERAL_xquery="xquery"=4
LITERAL_version="version"=5
LITERAL_module="module"=6
LITERAL_namespace="namespace"=7
STRING_LITERAL=8
LITERAL_encoding="encoding"=9
EQ=10
LITERAL_declare="declare"=11
"boundary-space"=12
LITERAL_default="default"=13
LITERAL_collation="collation"=14
"base-uri"=15
LITERAL_construction="construction"=16
LITERAL_ordering="ordering"=17
LITERAL_order="order"=18
"copy-namespaces"=19
LITERAL_import="import"=20
LITERAL_schema="schema"=21
LITERAL_element="element"=22
LITERAL_function="function"=23
LITERAL_variable="variable"=24
LITERAL_option="option"=25
SEMICOLON=26
LITERAL_preserve="preserve"=27
LITERAL_strip="strip"=28
LITERAL_ordered="ordered"=29
LITERAL_unordered="unordered"=30
LITERAL_empty="empty"=31
LITERAL_greatest="greatest"=32
LITERAL_least="least"=33
"no-preserve"=34
COMMA=35
LITERAL_inherit="inherit"=36
"no-inherit"=37
LITERAL_at="at"=38
DOLLAR=39
COLON=40
LITERAL_external="external"=41
LPAREN("'('")=42
RPAREN("')'")=43
LITERAL_as="as"=44
LCURLY=45
RCURLY=46
LITERAL_for="for"=47
LITERAL_let="let"=48
LITERAL_some="some"=49
LITERAL_every="every"=50
LITERAL_typeswitch="typeswitch"=51
LITERAL_if="if"=52
LITERAL_try="try"=53
LITERAL_catch="catch"=54
LITERAL_return="return"=55
LITERAL_in="in"=56
LITERAL_where="where"=57
LITERAL_stable="stable"=58
LITERAL_by="by"=59
LITERAL_ascending="ascending"=60
LITERAL_descending="descending"=61
LITERAL_satisfies="satisfies"=62
LITERAL_case="case"=63
LITERAL_then="then"=64
LITERAL_else="else"=65
LITERAL_or="or"=66
LITERAL_and="and"=67
LT=68
GT=69
LITERAL_eq="eq"=70
LITERAL_ne="ne"=71
LITERAL_lt="lt"=72
LITERAL_le="le"=73
LITERAL_gt="gt"=74
LITERAL_ge="ge"=75
NEQ=76
GTEQ=77
LTEQ=78
LITERAL_is="is"=79
LITERAL_to="to"=80
PLUS=81
MINUS=82
STAR=83
LITERAL_div="div"=84
LITERAL_idiv="idiv"=85
LITERAL_mod="mod"=86
LITERAL_union="union"=87
UNION=88
LITERAL_intersect="intersect"=89
LITERAL_except="except"=90
LITERAL_instance="instance"=91
LITERAL_of="of"=92
LITERAL_treat="treat"=93
LITERAL_castable="castable"=94
LITERAL_cast="cast"=95
LITERAL_validate="validate"=96
PRAGMA=97
SLASH=98
DSLASH=99
LITERAL_text="text"=100
LITERAL_node="node"=101
LITERAL_attribute="attribute"=102
LITERAL_comment="comment"=103
"processing-instruction"=104
"document-node"=105
"schema-attribute"=106
"schema-element"=107
LITERAL_document="document"=108
SELF=109
XML_COMMENT=110
XML_PI=111
AT=112
PARENT=113
LITERAL_child="child"=114
LITERAL_self="self"=115
LITERAL_descendant="descendant"=116
"descendant-or-self"=117
LITERAL_following="following"=118
"following-sibling"=119
LITERAL_parent="parent"=120
LITERAL_ancestor="ancestor"=121
"ancestor-or-self"=122
LITERAL_preceding="preceding"=123
"preceding-sibling"=124
LPPAREN=125
RPPAREN=126
DOUBLE_LITERAL=127
DECIMAL_LITERAL=128
INTEGER_LITERAL=129
END_TAG_START=130
ELEMENT_CONTENT=131
QUOT=132
APOS=133
QUOT_ATTRIBUTE_CONTENT=134
APOS_ATTRIBUTE_CONTENT=135
XQDOC_COMMENT=136
XML_COMMENT_END=137
XML_PI_END=138
XML_CDATA=139
XML_CDATA_END=140
QUESTION=141
LITERAL_void="void"=142
LITERAL_item="item"=143
NCNAME=144
LITERAL_lax="lax"=145
LITERAL_strict="strict"=146
ANDEQ=147
OREQ=148
XML_PI_START=149
LETTER=150
DIGITS=151
HEX_DIGITS=152
NMSTART=153
NMCHAR=154
WS=155
EXPR_COMMENT=156
PRAGMA_CONTENT=157
PRAGMA_QNAME=158
PREDEFINED_ENTITY_REF=159
CHAR_REF=160
NEXT_TOKEN=161
CHAR=162
BASECHAR=163
IDEOGRAPHIC=164
COMBINING_CHAR=165
DIGIT=166
EXTENDER=167
