// $ANTLR : XQuery.g -> XQueryParserTokenTypes.txt$
XQueryParser    // output token vocab name
LITERAL_xquery="xquery"=4
LITERAL_version="version"=5
LITERAL_module="module"=6
LITERAL_namespace="namespace"=7
STRING_LITERAL=8
LITERAL_encoding="encoding"=9
EQ=10
LITERAL_declare="declare"=11
LITERAL_xmlspace="xmlspace"=12
LITERAL_default="default"=13
LITERAL_collation="collation"=14
"base-uri"=15
LITERAL_construction="construction"=16
LITERAL_ordering="ordering"=17
LITERAL_order="order"=18
"inherit-namespaces"=19
LITERAL_import="import"=20
LITERAL_schema="schema"=21
LITERAL_element="element"=22
LITERAL_function="function"=23
LITERAL_variable="variable"=24
SEMICOLON=25
LITERAL_preserve="preserve"=26
LITERAL_strip="strip"=27
LITERAL_ordered="ordered"=28
LITERAL_unordered="unordered"=29
LITERAL_empty="empty"=30
LITERAL_greatest="greatest"=31
LITERAL_least="least"=32
LITERAL_yes="yes"=33
LITERAL_no="no"=34
LITERAL_at="at"=35
COMMA=36
DOLLAR=37
COLON=38
LITERAL_external="external"=39
LPAREN("'('")=40
RPAREN("')'")=41
LITERAL_as="as"=42
LCURLY=43
RCURLY=44
LITERAL_for="for"=45
LITERAL_let="let"=46
LITERAL_some="some"=47
LITERAL_every="every"=48
LITERAL_typeswitch="typeswitch"=49
LITERAL_if="if"=50
LITERAL_try="try"=51
LITERAL_catch="catch"=52
LITERAL_return="return"=53
LITERAL_in="in"=54
LITERAL_where="where"=55
LITERAL_stable="stable"=56
LITERAL_by="by"=57
LITERAL_ascending="ascending"=58
LITERAL_descending="descending"=59
LITERAL_satisfies="satisfies"=60
LITERAL_case="case"=61
LITERAL_then="then"=62
LITERAL_else="else"=63
LITERAL_or="or"=64
LITERAL_and="and"=65
LT=66
GT=67
LITERAL_eq="eq"=68
LITERAL_ne="ne"=69
LITERAL_lt="lt"=70
LITERAL_le="le"=71
LITERAL_gt="gt"=72
LITERAL_ge="ge"=73
NEQ=74
GTEQ=75
LTEQ=76
LITERAL_is="is"=77
LITERAL_to="to"=78
PLUS=79
MINUS=80
STAR=81
LITERAL_div="div"=82
LITERAL_idiv="idiv"=83
LITERAL_mod="mod"=84
LITERAL_union="union"=85
UNION=86
LITERAL_intersect="intersect"=87
LITERAL_except="except"=88
LITERAL_instance="instance"=89
LITERAL_of="of"=90
LITERAL_treat="treat"=91
LITERAL_castable="castable"=92
LITERAL_cast="cast"=93
LITERAL_validate="validate"=94
SLASH=95
DSLASH=96
LITERAL_text="text"=97
LITERAL_node="node"=98
LITERAL_attribute="attribute"=99
LITERAL_comment="comment"=100
"processing-instruction"=101
"document-node"=102
"schema-attribute"=103
"schema-element"=104
LITERAL_document="document"=105
SELF=106
XML_COMMENT=107
XML_PI=108
AT=109
PARENT=110
LITERAL_child="child"=111
LITERAL_self="self"=112
LITERAL_descendant="descendant"=113
"descendant-or-self"=114
LITERAL_following="following"=115
"following-sibling"=116
LITERAL_parent="parent"=117
LITERAL_ancestor="ancestor"=118
"ancestor-or-self"=119
LITERAL_preceding="preceding"=120
"preceding-sibling"=121
LPPAREN=122
RPPAREN=123
DOUBLE_LITERAL=124
DECIMAL_LITERAL=125
INTEGER_LITERAL=126
END_TAG_START=127
ELEMENT_CONTENT=128
QUOT=129
APOS=130
QUOT_ATTRIBUTE_CONTENT=131
APOS_ATTRIBUTE_CONTENT=132
XQDOC_COMMENT=133
XML_COMMENT_END=134
XML_PI_END=135
XML_CDATA=136
XML_CDATA_END=137
QUESTION=138
LITERAL_item="item"=139
NCNAME=140
LITERAL_lax="lax"=141
LITERAL_strict="strict"=142
LITERAL_collection="collection"=143
LITERAL_define="define"=144
LITERAL_isnot="isnot"=145
LITERAL_nillable="nillable"=146
LITERAL_type="type"=147
LITERAL_validation="validation"=148
ANDEQ=149
OREQ=150
XML_PI_START=151
LETTER=152
DIGITS=153
HEX_DIGITS=154
NMSTART=155
NMCHAR=156
WS=157
EXPR_COMMENT=158
PRAGMA=159
MU_EXTENSION=160
EXTENSION_CONTENT=161
PRAGMA_QNAME=162
PREDEFINED_ENTITY_REF=163
CHAR_REF=164
NEXT_TOKEN=165
CHAR=166
BASECHAR=167
IDEOGRAPHIC=168
COMBINING_CHAR=169
DIGIT=170
EXTENDER=171
